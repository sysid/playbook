# Conditional Deployment Workflow Example
# This example demonstrates conditional branching based on node outcomes

[variables]
ENVIRONMENT = { required = true, choices = ["dev", "staging", "prod"], description = "Target deployment environment" }
SKIP_TESTS = { default = false, type = "bool", description = "Skip running tests" }
ENABLE_ROLLBACK = { default = true, type = "bool", description = "Enable automatic rollback on failure" }

[runbook]
title = "Conditional Deployment Pipeline"
description = """
Advanced deployment pipeline with sophisticated conditional branching logic.
This workflow demonstrates environment-specific deployment paths, conditional testing,
security scanning for production, and automated rollback capabilities based on health checks.
"""
version = "1.0.0"
author = "devops-team"
created_at = "2025-01-20T12:00:00Z"

# Build the application (always runs)
[build_application]
type = "Command"
command_name = "npm run build"
description = """
Build the application with all dependencies and prepare artifacts.
This step compiles the source code, resolves dependencies, and creates
deployable packages ready for testing and environment-specific deployment.
"""
depends_on = []

# Run tests (conditional based on SKIP_TESTS variable)
[run_tests]
type = "Command"
command_name = "npm test"
description = """
Execute comprehensive test suite including unit and integration tests.
Validates code quality, functionality, and integration points to ensure
the application meets quality standards before deployment proceeds.
"""
depends_on = ["build_application"]
when = "{{ not SKIP_TESTS and has_succeeded('build_application') }}"

# Security scan (only for production)
[security_scan]
type = "Command"
command_name = "npm audit --audit-level high"
description = """
Perform security audit and vulnerability assessment for production.
Scans dependencies, checks for known vulnerabilities, and ensures
security compliance requirements are met before production deployment.
"""
depends_on = ["build_application"]
when = "{{ ENVIRONMENT == 'prod' and has_succeeded('build_application') }}"

# Deploy to development (only if build succeeded and environment is dev)
[deploy_development]
type = "Command"
command_name = "deploy.sh dev"
description = """
Deploy application to the development environment for initial testing.
Provides a sandbox environment for feature validation, integration testing,
and early feedback before promoting to higher environments.
"""
depends_on = ["build_application"]
when = "{{ ENVIRONMENT == 'dev' and has_succeeded('build_application') }}"

# Deploy to staging (only if tests pass and environment is staging)
[deploy_staging]
type = "Command"
command_name = "deploy.sh staging"
description = """
Deploy application to staging environment for pre-production validation.
Mirrors production environment for final testing, performance validation,
and stakeholder approval before production release.
"""
depends_on = ["run_tests"]
when = "{{ ENVIRONMENT == 'staging' and (SKIP_TESTS or has_succeeded('run_tests')) }}"

# Manual approval for production (only for prod environment)
[production_approval]
type = "Manual"
prompt_after = "Ready to deploy to production? This will affect live users."
description = """
Require manual approval before proceeding with production deployment.
Critical checkpoint that ensures human oversight, final validation,
and explicit authorization for changes that will affect live users.
"""
depends_on = ["run_tests", "security_scan"]
when = "{{ ENVIRONMENT == 'prod' }}"

# Deploy to production (only after approval and all checks pass)
[deploy_production]
type = "Command"
command_name = "deploy.sh prod"
description = """
Deploy application to production environment with full monitoring.
Executes production deployment with careful monitoring, health checks,
and readiness to rollback if any issues are detected during deployment.
"""
depends_on = ["production_approval"]
when = "{{ ENVIRONMENT == 'prod' and has_succeeded('production_approval') and (SKIP_TESTS or has_succeeded('run_tests')) and has_succeeded('security_scan') }}"

# Health check (runs after any deployment)
[health_check]
type = "Command"
command_name = "curl -f https://{{ENVIRONMENT}}.myapp.com/health"
description = """
Perform comprehensive health check to verify successful deployment.
Validates service endpoints, database connectivity, and application
functionality to ensure the deployment is operating correctly.
"""
depends_on = ["deploy_development", "deploy_staging", "deploy_production"]
when = "{{ has_succeeded('deploy_development') or has_succeeded('deploy_staging') or has_succeeded('deploy_production') }}"

# Rollback (only if health check fails and rollback is enabled)
[rollback_deployment]
type = "Command"
command_name = "rollback.sh {{ENVIRONMENT}}"
description = """
Automatically rollback deployment if health checks fail.
Restores the previous stable version to minimize downtime and impact
on users when deployment issues are detected.
"""
depends_on = ["health_check"]
when = "{{ ENABLE_ROLLBACK and has_failed('health_check') }}"

# Notification for successful deployment
[notify_success]
type = "Manual"
prompt_after = "Deployment completed successfully. Continue?"
description = """
Notify stakeholders and team members of successful deployment completion.
Provides deployment summary, performance metrics, and links to monitoring
dashboards for ongoing operational awareness.
"""
depends_on = ["health_check"]
when = "{{ has_succeeded('health_check') }}"

# Notification for failed deployment
[notify_failure]
type = "Manual"
prompt_after = "Deployment failed. Incident response may be required. Continue?"
description = """
Alert team and stakeholders about deployment failure and required actions.
Triggers incident response procedures, provides failure details,
and coordinates remediation efforts to restore service quickly.
"""
depends_on = ["deploy_development", "deploy_staging", "deploy_production", "rollback_deployment"]
when = "{{ has_failed('deploy_development') or has_failed('deploy_staging') or has_failed('deploy_production') or has_succeeded('rollback_deployment') }}"