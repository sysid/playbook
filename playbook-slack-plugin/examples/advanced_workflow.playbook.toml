# Advanced Slack Integration Workflow
# This example demonstrates the full capabilities of the Slack plugin including
# message sending, file uploads, and channel creation

[variables]
SLACK_WEBHOOK = { default = "${SLACK_WEBHOOK_URL}", description = "Slack webhook URL for notifications" }
SLACK_BOT_TOKEN = { default = "${SLACK_BOT_TOKEN}", description = "Slack bot token for API operations" }
PROJECT_NAME = { required = true, description = "Project name" }
ENVIRONMENT = { required = true, choices = ["dev", "staging", "prod"], description = "Deployment environment" }
VERSION = { default = "1.0.0", description = "Application version" }
DEPLOY_LOG_PATH = { default = "/tmp/deployment.log", description = "Path to deployment log file" }

# Global plugin configuration with both webhook and bot token
[runbook.plugin_config.slack]
webhook_url = "{{SLACK_WEBHOOK}}"
bot_token = "{{SLACK_BOT_TOKEN}}"
default_channel = "#deployments"
timeout = 30

[runbook]
title = "Advanced Slack Integration Workflow"
description = "Complete deployment workflow with Slack notifications, file uploads, and channel management"
version = "1.0.0"
author = "DevOps Team"
created_at = "2025-01-20T12:00:00Z"

# Step 1: Notify deployment start
[notify_deployment_start]
type = "Function"
plugin = "slack"
function = "send_message"
function_params = {
    text = "üöÄ Starting deployment of {{PROJECT_NAME}} v{{VERSION}} to {{ENVIRONMENT}}",
    channel = "#deployments",
    username = "DeployBot",
    icon_emoji = ":rocket:",
    urgency = "normal"
}
description = "Notify team about deployment start"
depends_on = []

# Step 2: Create a dedicated channel for this deployment
[create_deployment_channel]
type = "Function"
plugin = "slack"
function = "create_channel"
function_params = {
    name = "deploy-{{PROJECT_NAME|lower}}-{{ENVIRONMENT}}",
    is_private = false,
    purpose = "Deployment tracking for {{PROJECT_NAME}} in {{ENVIRONMENT}} environment",
    topic = "Current deployment: v{{VERSION}} | Status: In Progress"
}
description = "Create dedicated channel for this deployment"
depends_on = ["notify_deployment_start"]

# Step 3: Create deployment log file (simulated)
[create_deployment_log]
type = "Command"
command_name = "echo 'Deployment Log for {{PROJECT_NAME}} v{{VERSION}}\nEnvironment: {{ENVIRONMENT}}\nStarted: $(date)\nStatus: Starting...' > {{DEPLOY_LOG_PATH}}"
description = "Create initial deployment log file"
depends_on = ["create_deployment_channel"]

# Step 4: Simulate pre-deployment checks
[pre_deployment_checks]
type = "Command"
command_name = "echo 'Running pre-deployment checks...\n- Environment health: OK\n- Database connectivity: OK\n- Dependencies: OK' >> {{DEPLOY_LOG_PATH}}"
description = "Run pre-deployment checks"
depends_on = ["create_deployment_log"]

# Step 5: Upload initial deployment log
[upload_initial_log]
type = "Function"
plugin = "slack"
function = "send_file"
function_params = {
    file_path = "{{DEPLOY_LOG_PATH}}",
    channels = "#deploy-{{PROJECT_NAME|lower}}-{{ENVIRONMENT}}",
    initial_comment = "üìã Initial deployment log for {{PROJECT_NAME}} v{{VERSION}}",
    title = "Deployment Log - {{PROJECT_NAME}} v{{VERSION}} (Initial)",
    filetype = "text"
}
description = "Upload initial deployment log to dedicated channel"
depends_on = ["pre_deployment_checks"]

# Step 6: Simulate main deployment process
[main_deployment]
type = "Command"
command_name = "echo 'Executing main deployment...\n- Pulling container image: {{PROJECT_NAME}}:{{VERSION}}\n- Updating configuration\n- Rolling out to {{ENVIRONMENT}}\n- Health checks passed' >> {{DEPLOY_LOG_PATH}}"
description = "Execute main deployment process"
depends_on = ["upload_initial_log"]

# Step 7: Post-deployment verification
[post_deployment_verification]
type = "Command"
command_name = "echo 'Post-deployment verification...\n- Application health: OK\n- API endpoints: Responding\n- Performance metrics: Within limits\nDeployment completed successfully!' >> {{DEPLOY_LOG_PATH}}"
description = "Run post-deployment verification"
depends_on = ["main_deployment"]

# Step 8: Upload final deployment log
[upload_final_log]
type = "Function"
plugin = "slack"
function = "send_file"
function_params = {
    file_path = "{{DEPLOY_LOG_PATH}}",
    channels = "#deploy-{{PROJECT_NAME|lower}}-{{ENVIRONMENT}},#deployments",
    initial_comment = "‚úÖ Final deployment log for {{PROJECT_NAME}} v{{VERSION}} - Deployment completed successfully!",
    title = "Deployment Log - {{PROJECT_NAME}} v{{VERSION}} (Final)",
    filetype = "text"
}
description = "Upload final deployment log to both dedicated and main channels"
depends_on = ["post_deployment_verification"]

# Step 9: Send success notification to main channel
[notify_deployment_success]
type = "Function"
plugin = "slack"
function = "send_message"
function_params = {
    text = "‚úÖ {{PROJECT_NAME}} v{{VERSION}} has been successfully deployed to {{ENVIRONMENT}}!\n\nüìä Deployment Summary:\n‚Ä¢ Environment: {{ENVIRONMENT}}\n‚Ä¢ Version: {{VERSION}}\n‚Ä¢ Status: ‚úÖ Success\n‚Ä¢ Logs: See #deploy-{{PROJECT_NAME|lower}}-{{ENVIRONMENT}}",
    channel = "#deployments",
    username = "DeployBot",
    icon_emoji = ":white_check_mark:",
    urgency = "high"
}
description = "Send success notification to main deployments channel"
depends_on = ["upload_final_log"]

# Step 10: Update dedicated channel topic
[update_channel_topic]
type = "Function"
plugin = "slack"
function = "create_channel"
function_params = {
    name = "deploy-{{PROJECT_NAME|lower}}-{{ENVIRONMENT}}",
    topic = "Deployment v{{VERSION}} completed successfully ‚úÖ | Next: TBD"
}
description = "Update channel topic to reflect completion"
depends_on = ["notify_deployment_success"]

# Step 11: Send monitoring reminder
[monitoring_reminder]
type = "Function"
plugin = "slack"
function = "send_message"
function_params = {
    text = "üîç Don't forget to monitor {{PROJECT_NAME}} in {{ENVIRONMENT}} for the next 24 hours.\n\nMonitoring checklist:\n‚Ä¢ Application performance\n‚Ä¢ Error rates\n‚Ä¢ Resource utilization\n‚Ä¢ User feedback",
    channel = "#deploy-{{PROJECT_NAME|lower}}-{{ENVIRONMENT}}",
    urgency = "low"
}
description = "Send monitoring reminder to deployment team"
depends_on = ["update_channel_topic"]

# Step 12: Cleanup temporary files
[cleanup]
type = "Command"
command_name = "rm -f {{DEPLOY_LOG_PATH}}"
description = "Clean up temporary deployment log file"
depends_on = ["monitoring_reminder"]

# Step 13: Final workflow completion notification
[workflow_completion]
type = "Function"
plugin = "slack"
function = "send_message"
function_params = {
    text = "üéâ Advanced Slack integration workflow completed!\n\nWorkflow summary:\n‚Ä¢ Created dedicated deployment channel\n‚Ä¢ Uploaded deployment logs\n‚Ä¢ Sent notifications with different urgency levels\n‚Ä¢ Demonstrated all Slack plugin capabilities",
    channel = "#general",
    urgency = "normal"
}
description = "Send final workflow completion notification"
depends_on = ["cleanup"]